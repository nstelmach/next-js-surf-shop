generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String
  email          String    @unique
  hashedPassword String
  role           String    @default("USER")
  tokens         Token[]
  sessions       Session[]
  newsletter     Boolean   @default(false)
  cart           Cart?
  messages       Message[]
  orders         Order[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User      @relation(fields: [userId], references: [id])
  userId             Int
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  prices       Price[]
  sizes        Size[]
  images       Image[]
  bestseller   Boolean
  category     Category
  cartProducts CartProduct[]
  orderProduct OrderProduct[]
}

model Image {
  id        Int     @id @default(autoincrement())
  src       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

enum Category {
  tees
  hoodies
  longsleeves
}

enum Size {
  XS
  S
  M
  L
  XL
}

model Price {
  id        Int     @id @default(autoincrement())
  price     Decimal @db.Money
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Message {
  id      Int    @id @default(autoincrement())
  name    String
  email   String
  message String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

model Cart {
  id           Int           @id @default(autoincrement())
  cartProducts CartProduct[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  shipping     Shipping      @relation(fields: [shippingName], references: [name])
  shippingName String
  payment      Payment       @relation(fields: [paymentName], references: [name])
  paymentName  String
}

model CartProduct {
  id         Int     @id @default(autoincrement())
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  cart       Cart    @relation(fields: [cartId], references: [id])
  cartId     Int
  chosenSize String
  quantity   Int
}

model Shipping {
  id    Int     @id @default(autoincrement())
  label String
  price Int
  name  String  @unique
  cart  Cart[]
  Order Order[]
}

model Payment {
  id    Int     @id @default(autoincrement())
  label String
  name  String  @unique
  cart  Cart[]
  Order Order[]
}

model Order {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  user         User?          @relation(fields: [userId], references: [id])
  userId       Int?
  price        Int
  shipping     Shipping       @relation(fields: [shippingName], references: [name])
  payment      Payment        @relation(fields: [paymentName], references: [name])
  shippingName String
  paymentName  String
  products     OrderProduct[]
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   Int?
  size      String
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}
